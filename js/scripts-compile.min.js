// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
// MIT license
(function() {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
            || window[vendors[x]+'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };

    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
}());
/**
 * http://tonybogdanov.com
 * https://gist.github.com/TonyBogdanov/eadd0fdfb238b0355486
 *
 * Use, share and improve :)
 */
(function($) {
    "use strict";

    var detectTransitionEvent   = function() {
        // Create a dummy element to test for event names
        var element             = document.createElement('div');

        // Map transition properties with the corresponding transitionend event names
        var events              = {
            'transition':       'transitionend',
            'OTransition':      'oTransitionEnd',
            'MozTransition':    'transitionend',
            'WebkitTransition': 'webkitTransitionEnd'
        };

        // Get the first supported event name
        for(var event in events) {
            if("undefined" != typeof element.style[event]) {
                return events[event];
            }
        }

        // Browser does not support the transitionend event
        return null;
    };
    $.fn.transitionEnd          = function(callback, propertyNames, fallbackTimeout) {
        // Call for all elements in the collection
        return $(this).each(function() {
            // Get a jQuery reference to the current element
            var $this           = $(this);

            // Detect the browser supported event name and cache it for future use
            var event           = "undefined" == typeof window._detectedTransitionEventName ? (window._detectedTransitionEventName = detectTransitionEvent()) : window._detectedTransitionEventName;

            // No browser support, use setTimeout
            if(null === event) {
                fallbackTimeout = parseInt(fallbackTimeout);
                setTimeout(callback, isNaN(fallbackTimeout) ? 350 : fallbackTimeout);
                return true;
            }

            // Get a reference to the raw DOM object
            var domElement      = $this.get(0);

            // Remove any previously bound listeners and add a new even handler
            $this.unbind(event).bind(event, function(e) {
                // Is the event actually fired by the current DOM element?
                if(e.originalEvent.target !== domElement) {
                    return;
                }

                // Is the propertyNames argument set?
                if("string" == typeof propertyNames) {
                    // If the current property is not in the list bail early
                    if(-1 == propertyNames.split(' ').indexOf(e.originalEvent.propertyName)) {
                        return;
                    }
                }

                // All's good, detach the handler and run the callback
                $(domElement).unbind(event);
                callback();
            });
        });
    };
})(jQuery);
(function($) {
    "use strict";

    $.fn.imageLoad          = function(callback) {
        if(!callback) {
            return $(this);
        }
        return $(this).each(function() {
            var $this       = $(this);
            var image       = $this.get(0);
            if(image.naturalWidth > 0 && image.naturalHeight > 0) {
                callback.call($this);
            } else {
                $this.one('load', function() {
                    callback.call($this);
                });
            }
        });
    };
})(jQuery);
/**
 * Lightbox Plugin
 *
 * @requires ../plugins/requestAnimationFrame.js
 * @requires ../plugins/transitionEnd.js
 * @requires ../plugins/image-load.js
 */
(function($) {
    "use strict";

    $(function() {
        // Options
        var sizeFactor                  = 0.9; // The lightbox cannot be larger than the visible bounds by more than this factor

        // Globals
        var $window                     = $(window);
        var $html                       = $('html');
        var $body                       = $('body');
        var extensions                  = ['jpg', 'jpeg', 'pjpeg', 'gif', 'png'];
        var selector                    = '[href*=".' + extensions.join('"], [href*=".') + '"]';

        // Create a lightbox image instance
        var createLightboxImage         = function(url) {
            return {
                url:                    url,
                ready:                  false,
                observers:              [],
                addObserver:            function(observer) {
                    this.observers.push(observer);
                },
                notifyObservers:        function() {
                    while(this.observers.length) {
                        this.observers.shift().call();
                    }
                }
            };
        };

        // Create and display a lightbox with the given images
        var createLightbox              = function(images) {
            // Active image
            var activeImage             = null;

            // Prepare image array and start preloading
            $.each(images, function(i) {
                var image               = this;

                if(image.active) {
                    activeImage         = image;
                }

                image.index             = i;
                image.image             = createLightboxImage(image.source.parent().attr('href'));
                image.thumb             = createLightboxImage(image.source.attr('src'));

                var preload             = function(obj) {
                    var $dummy          = $('<img/>').hide();
                    $body.append($dummy);
                    $dummy.imageLoad(function() {
                        $dummy.remove();
                        obj.ready       = true;
                        obj.notifyObservers();
                    });
                    $dummy.attr('src', obj.url);
                };
                preload(image.thumb);
                preload(image.image);
            });

            // Prepare elements
            var $lightbox               = $('<div/>').addClass(1 < images.length ? 'lightbox lb-gallery' : 'lightbox').bind('click', function() {
                // Clicking on the lightbox shadow destroys it
                $lightbox.trigger('destroy');
            }).bind('resize', function(e) {
                // Resizing any lightbox component should not bubble up
                e.stopPropagation();
            });
            var $controls               = $('<div class="lb-controls"/>').bind('click', function(e) {
                // Clicking on the controls panel should not propagate so that the lightbox won't be destroyed
                e.stopImmediatePropagation();
            });
            var $controlsBottom         = $('<div class="lb-controls-bottom"/>');
            var $controlClose           = $('<a href="#" class="lb-close"><i class="fa fa-close"></i></a>').bind('click', function(e) {
                // The close button destroys the lightbox
                e.preventDefault();
                $lightbox.trigger('destroy');
            });
            var $controlOpen            = $('<a href="#" class="lb-open"><i class="fa fa-external-link"></i></a>').bind('click', function(e) {
                // The open button pops up the current image
                e.preventDefault();
                $lightbox.trigger('popup');
            });
            var $controlNext            = $('<a href="#" class="lb-next"><i class="fa fa-angle-right"></i></a>').css('display', 1 < images.length ? 'block' : 'none').bind('click', function(e) {
                // The next button slides to the next image
                e.preventDefault();
                $lightbox.trigger('next');
            });
            var $controlPrev            = $('<a href="#" class="lb-prev"><i class="fa fa-angle-left"></i></a>').css('display', 1 < images.length ? 'block' : 'none').bind('click', function(e) {
                // The next button slides to the previous image
                e.preventDefault();
                $lightbox.trigger('prev');
            });
            var $previews               = $('<div class="lb-previews"/>').bind('click', function(e) {
                // Clicking on the previews panel should not propagate so that the lightbox won't be destroyed
                e.stopImmediatePropagation();
            });
            var $previewsWrapper        = $('<div class="lb-previews-wrapper"/>').bind('update', function() {
                // Update the position of the wrapper so that the currently active image would always be in the center
                var $active             = $previewsWrapper.children('img.active');
                if(0 < $active.length) {
                    $previewsWrapper.css('left', ($previews.outerWidth() / 2) - $active.outerWidth() / 2 - $active.position().left);
                }
            });
            var $wrapper                = $('<div class="lb-wrapper"/>');
            var $holder                 = $('<div class="lb-holder"/>').bind('click', function(e) {
                // Clicking on the holder slides to the next image and stops propagation
                e.stopImmediatePropagation();
                $controlNext.trigger('click');
            });
            var $images                 = $('<div class="lb-images"/>');
            var $image                  = $('<img/>');

            // Create preview thumbs
            $.each(images, function(i) {
                var image               = this;
                var $preview            = $('<img/>').attr('src', image.thumb.url).bind('click', function(e) {
                    e.preventDefault();
                    activeImage.active  = false;
                    images[i].active    = true;
                    activeImage         = images[i];
                    $lightbox.trigger('slide');
                });
                $previewsWrapper.append($preview);
            });

            // Window resize listener
            var _resizeLock             = false;
            var resizeListener          = function() {
                if(_resizeLock) {
                    return;
                }
                _resizeLock             = true;
                requestAnimationFrame(function() {
                    _resizeLock         = false;
                    $lightbox.trigger('resize');
                    $previewsWrapper.trigger('update');
                });
            };
            $window.bind('resize', resizeListener);

            // Keyboard navigation listener
            var keyboardListener        = function(e) {
                switch(e.keyCode) {
                    case 37:
                        $lightbox.trigger('prev');
                        break;
                    case 39:
                        $lightbox.trigger('next');
                        break;
                    case 27:
                        $lightbox.trigger('destroy');
                        break;
                }
            };
            $body.on('keydown', keyboardListener);

            // Bind: Open lightbox
            $lightbox.bind('open', function() {
                $lightbox.addClass('open');
            });

            // Bind: Close lightbox
            $lightbox.bind('close', function() {
                $lightbox.removeClass('open');
            });

            // Bind: Destroy lightbox
            $lightbox.bind('destroy', function() {
                $lightbox.trigger('source', function() {
                    $lightbox.transitionEnd(function() {
                        $window.unbind('resize', resizeListener);
                        $window.unbind('resize', keyboardListener);
                        $lightbox.remove();
                    });
                    $lightbox.trigger('close');
                });
            });

            // Bind: Slide to image
            var _slideLock              = false;
            var slideLock               = function() {
                _slideLock              = true;
            };
            var slideUnlock             = function() {
                _slideLock              = false;
            };
            $lightbox.bind('slide', function() {
                // Block future slides until unlocked
                if(_slideLock) {
                    return;
                }
                slideLock();

                // Activate correct preview
                $previewsWrapper.children('img.active').removeClass('active');
                $previewsWrapper.children('img').eq(activeImage.index).addClass('active');
                $previewsWrapper.trigger('update');

                // Check if thumbnail is ready
                if(activeImage.thumb.ready) {

                    // Check if image is also ready
                    if(activeImage.image.ready) {

                        // Bail early if target image is the same as current one
                        if($image.attr('src') == activeImage.image.url) {
                            return slideUnlock();
                        }

                        // Start transition
                        $images.transitionEnd(function() {
                            // Swap image
                            $image.attr('src', activeImage.image.url);

                            // Wait a frame for the swap to complete
                            requestAnimationFrame(function() {
                                // Resize to swapped image's dimensions
                                $lightbox.trigger('resize', function() {
                                    // Finish transition
                                    $images.transitionEnd(function() {
                                        // Transition is over, unlock
                                        slideUnlock();
                                    });
                                    $images.removeClass('lb-transit');
                                });
                            });
                        });
                        $images.addClass('lb-transit');
                    } else {

                        // Image is not ready, let's use thumbnail but schedule a slide for once the image is ready
                        activeImage.image.addObserver(function() {
                            $lightbox.trigger('scheduleSlide');
                        });

                        // Bail early if target image is the same as current one
                        if($image.attr('src') == activeImage.thumb.url) {
                            return slideUnlock();
                        }

                        // Start transition
                        $images.transitionEnd(function() {
                            // Swap image
                            $image.attr('src', activeImage.thumb.url);

                            // Wait a frame for the swap to complete
                            requestAnimationFrame(function() {
                                // Resize to swapped image's dimensions
                                $lightbox.trigger('resize', function() {
                                    // Finish transition
                                    $images.transitionEnd(function() {
                                        // Transition is over, unlock
                                        slideUnlock();
                                    });
                                    $images.removeClass('lb-transit');
                                });
                            });
                        });
                        $images.addClass('lb-transit');
                    }
                } else {

                    // Thumbnail is not ready, unlock and schedule a slide for once the thumbnail is ready
                    activeImage.thumb.addObserver(function() {
                        $lightbox.trigger('scheduleSlide');
                    });
                    slideUnlock();
                }
            });

            // Bind: Schedule slide
            // A slide that cannot be blocked and it WILL be performed once the lock is down
            $lightbox.bind('scheduleSlide', function() {
                if(_slideLock) {
                    setTimeout(function() {
                        $lightbox.trigger('scheduleSlide');
                    }, 100);
                } else {
                    $lightbox.trigger('slide');
                }
            });

            // Bind: Popup image
            $lightbox.bind('popup', function() {
                $.each(images, function() {
                    if(this.active) {
                        window.open(this.image.url);
                        return false;
                    }
                });
            });

            // Bind: Prev image
            $lightbox.bind('prev', function() {
                if(_slideLock) {
                    return;
                }
                var index               = 0;
                $.each(images, function(i) {
                    if(this.active) {
                        index           = i;
                        this.active     = false;
                        return false;
                    }
                });
                index                   = index - 1 < 0 ? images.length - 1 : index - 1;
                images[index].active    = true;
                activeImage             = images[index];
                $lightbox.trigger('slide');
            });

            // Bind: Next image
            $lightbox.bind('next', function() {
                if(_slideLock) {
                    return;
                }
                var index               = 0;
                $.each(images, function(i) {
                    if(this.active) {
                        index           = i;
                        this.active     = false;
                        return false;
                    }
                });
                index                   = index + 1 >= images.length ? 0 : index + 1;
                images[index].active    = true;
                activeImage             = images[index];
                $lightbox.trigger('slide');
            });

            // Bind: Animate from / to source
            // Should manually trigger "resize" where applicable
            $lightbox.bind('source', function(e, callback) {
                // Animate if thumb ready or wait for it (waiting would in most cases never be needed)
                var animate             = function() {
                    var target          = activeImage.source;
                    if(!target.is(':visible')) {
                        target          = target.parents('a').first();
                    }
                    $holder.css({
                        width:          target.width(),
                        height:         target.height(),
                        top:            target.offset().top + parseInt(target.css('border-top-width')) + parseInt(target.css('padding-top')) + parseInt(target.css('margin-top')) - parseInt($html.css('margin-top')) - $window.scrollTop(),
                        left:           target.offset().left + parseInt(target.css('border-left-width')) + parseInt(target.css('padding-left')) + parseInt(target.css('margin-left')) - parseInt($html.css('margin-left')) - $window.scrollLeft()
                    });
                };
                if(activeImage.thumb.ready) {
                    // Thumb is ready, use it
                    $image.attr('src', activeImage.thumb.url);
                    requestAnimationFrame(function() {
                        animate();
                        callback.call();
                    });
                } else {
                    // Thumb is not ready, wait for it
                    activeImage.thumb.addObserver(function() {
                        $image.attr('src', activeImage.thumb.url);
                        requestAnimationFrame(function() {
                            animate();
                            callback.call();
                        });
                    });
                }
            });

            // Bind: Resize lightbox
            $lightbox.bind('resize', function(e, callback) {
                var image               = $image.get(0);
                var width               = Math.round($wrapper.width() * sizeFactor);
                var height              = Math.round(width * image.naturalHeight / image.naturalWidth);
                if(height > $wrapper.height() * sizeFactor) {
                    height              = Math.round($wrapper.height() * sizeFactor);
                    width               = Math.round(height * image.naturalWidth / image.naturalHeight);
                }
                width                   += 20; // Padding
                height                  += 20; // Padding

                var top                 = Math.round(($wrapper.height() - height) / 2);
                var left                = Math.round(($wrapper.width() - width) / 2);

                $image.css(image.naturalWidth > image.naturalHeight ? {width: '100%', height: 'auto'} : {width: 'auto', height: '100%'});
                if(width != parseInt($holder.css('width')) || height != parseInt($holder.css('height')) || top != parseInt($holder.css('top')) || left != parseInt($holder.css('left'))) {
                    if('function' == typeof callback) {
                        $holder.transitionEnd(callback);
                    }
                    $holder.css({
                        top:            top,
                        left:           left,
                        width:          width,
                        height:         height
                    });
                } else if('function' == typeof callback) {
                    callback.call(this);
                }
            });

            // Add markup to body and init lightbox
            $lightbox.trigger('source', function() {
                $body.append($lightbox.append($controls.append($controlClose).append($controlOpen).append($controlsBottom.append($controlPrev).append($controlNext))).append($previews.append($previewsWrapper)).append($wrapper.append($holder.append($images.append($image)))));

                // Wait a frame for the markup to propagate to DOM
                requestAnimationFrame(function() {
                    $lightbox.trigger('open');
                    $lightbox.trigger('resize', function() {
                        $lightbox.trigger('slide');
                    });
                });
            });
        };

        // Auto spawn lightbox
        $body.on('click', selector, function(e) {
            var $this                   = $(this);
            var findThumbnail           = function() {
                var $image              = this.find('img').first();
                if(1 == $image.length) {
                    return $image;
                }
                if(this[0].hasAttribute('data-lightbox-thumbnail') && 0 < this.attr('data-lightbox-thumbnail').length) {
                    return $('<img/>').attr('src', this.attr('data-lightbox-thumbnail')).hide().appendTo(this);
                }
                return false;
            };
            var $thumbnail              = findThumbnail.call($this);
            if(false === $thumbnail) {
                return;
            }

            e.preventDefault();
            e.stopImmediatePropagation();

            var $group                  = $this[0].hasAttribute('data-lightbox-group') ? $('[data-lightbox-group="' + $this.attr('data-lightbox-group') + '"]').filter(selector) : $this.parents('.gallery').first().find(selector);
            if(0 < $group.length) {
                var data                = [];
                $group.each(function() {
                    var $subThis        = $(this);
                    var $subThumbnail   = findThumbnail.call($subThis);
                    if(false === $subThumbnail) {
                        return true;
                    }
                    data.push({
                        active:         $thumbnail.attr('src') == $subThumbnail.attr('src'),
                        source:         $subThumbnail
                    });
                });
                createLightbox(data);
            } else {
                createLightbox([{
                    active:             true,
                    source:             $thumbnail
                }]);
            }
        });
    });
})(jQuery);

(function($) {
    "use strict";

    /* Section headings */
    // This appends 4 elements to section headings for easy styling
    window.bindSectionHeadings = function() {
        $('.section-heading:not(.js-no-borders), .hero-heading:not(.js-no-borders)').each(function() {
            $(this).find('.tl, .tr, .br, .bl').remove();
            $(this).append('<div class="tl"/>').append('<div class="tr"/>').append('<div class="br"/>').append('<div class="bl"/>');
        });
    };
    window.bindSectionHeadings();

    /* Fixed navigation */
    // This detects if the navigation should be fixed while scrolling
    $(function() {
        $(window).bind('scroll', function() {
            var $this   = $(this);
            var $body   = $('body');
            var offset  = 0;
            if(0 < $('.top-bar:visible').length) {
                offset  += $('.top-bar').outerHeight();
            }
            if(0 < $('#topbar-expandable:visible').length) {
                offset  += Math.max(8, $('#topbar-expandable').outerHeight());
            }
            if(0 < $('#hero:visible').length) {
                offset  += $('#hero').outerHeight();
            }
            if($this.scrollTop() >= offset) {
                $('nav.navbar').css('top', 0 < $('#wpadminbar').length ? $('#wpadminbar').outerHeight() : 0);
                $body.addClass('nav-fixed');
            } else {
                $('nav.navbar').css('top', 0);
                $body.removeClass('nav-fixed');
            }
        });
    });

    /* Autocollapse navigation */
    // Automatically collpase the navigation bar when clicking a link in mobile device design mode
    $('.navbar-collapse a').bind('click', function(e) {
        $('.navbar-collapse.in').collapse('hide');
    });

    /* Navigation nodes */
    window.bindNavigationNodes = function() {
        $('.navbar-nav ul ul.sub-menu').each(function() {
            $(this).parent('li').addClass('node');
        });
    };
    window.bindNavigationNodes();

    /* Center nested navigation */
    // This centers the first nested navigation list to it's parent
    var nestedNavigationCenter  = function() {
        if(768 <= $(window).width()) {
            $('.nav > li > ul').each(function() {
                var $this   = $(this);
                $this.css({marginLeft: $this.width() / -2});
            });
        } else {
            $('.nav > li > ul').css({marginLeft: 15});
        }
    };
    $(window).bind('resize-end', nestedNavigationCenter);
    nestedNavigationCenter();

    /* Navigation scroll spy */
    // Automatically highlight a navigation link when user scrolls to the target section
    var navigationScrollSpies   = [];
    $('.navbar [href*="#"]:not([href="#"])').each(function() {
        var $this   = $(this);
        var $li     = $this.parent('li');
        var $target = $('#' + $this.attr('href').split('#')[1]);
        if(0 < $li.length && 0 < $target.length) {
            $li.removeClass('active');
            navigationScrollSpies.push({spy: $li, target: $target});
        }
    });
    $(window).bind('scroll resize-end', function() {
        var $window = $(window);
        var $max    = null;
        var max     = 0;
        for(var i = 0; i < navigationScrollSpies.length; i++) {
            var area    = Math.max($window.scrollTop(), Math.min($window.scrollTop() + $window.height(), navigationScrollSpies[i].target.offset().top + navigationScrollSpies[i].target.height())) - Math.max($window.scrollTop(), Math.min($window.scrollTop() + $window.height(), navigationScrollSpies[i].target.offset().top));
            if(area > max) {
                $max    = navigationScrollSpies[i].spy;
                max     = area;
            }
        }
        if(0 < max && !$max.hasClass('active')) {
            for(var i = 0; i < navigationScrollSpies.length; i++) {
                navigationScrollSpies[i].spy.removeClass('active');
            }
            $max.addClass('active');
        }
    }).triggerHandler('scroll');

    /* Native placeholder support */
    // Mimic form fields placeholders for browsers which do not support it (yes IE9, I'm looking at you!)
    if(!('placeholder' in document.createElement('input'))) {
        $('[placeholder]').each(function() {
            var $this   = $(this);
            if(0 === $this.val().length) {
                $this.val($this.attr('placeholder'));
            }
        }).bind('focus', function() {
            var $this   = $(this);
            if($this.val() == $this.attr('placeholder')) {
                $this.val('');
            }
        }).bind('blur', function() {
            var $this   = $(this);
            if($this.val() == '') {
                $this.val($this.attr('placeholder'));
            }
        });
    }

    /* Void buttons */
    // Do nothing when clicking on buttons with href="#"
    $('[href="#"]').bind('click', function(e) {
        e.preventDefault();
    });

    /* Popup window */
    // Open pages in popup when clicking on links which href starts with #!
    function bindPopups() {
        $('[href^="#!"]').unbind('click').bind('click', function(e) {
            e.preventDefault();
            var $this   = $(this);
            var $body   = $('body');
            var $popup  = $('#popup');
            var url     = $this.attr('href').substring(2);

            if(url.match(/\?/)) {
                url     = url.replace('?', '?__tbspopup=1&');
            } else {
                url     = url + '?__tbspopup=1';
            }

            history.replaceState(null, null, '#!' + url);
            $body.addClass('popup-open');
            $popup.attr('src', url);
            $popup.show();
        });
    }
    bindPopups();

    // Automatically open popup if page URL requests it
    if(document.location.hash.match(/^\#\!.+/)) {
        var $link = $('<a href="' + document.location.hash + '"/>');
        $('body').append($link);
        bindPopups();
        $link.triggerHandler('click');
        $link.remove();

    }

    /* Close popup */
    // Close the popup
    $('.nav-close').bind('click', function(e) {
        e.preventDefault();
        var $parent = $(document).parent();
        var $body   = $(window.parent.document.body);
        var $popup  = $('#popup', window.parent.document.body);
        $popup.hide().attr('src', 'about:blank');
        $body.removeClass('popup-open');
        window.parent.history.replaceState(null, null, window.parent.document.location.pathname);
    });

    /* Skill bars */
    // Animate the skill bars, 3000 is the animation duration, make sure it matches the one from the CSS (or LESS)
    $('.skill-bar').each(function() {
        var $this   = $(this);
        var value   = parseInt($this.attr('data-value'));
        $this.data('animate-skill', function() {
            if($this.hasClass('skill-bar-bullets')) {
                var $bullets        = $this.find('.fill');
                var thresholdStep   = 100 / $bullets.length;
                $bullets.each(function(index) {
                    var $this       = $(this);
                    var threshold   = (index + 1) * thresholdStep;
                    setTimeout(function() {
                        if(threshold <= value) {
                            $this.css('opacity', 1);
                        } else if(threshold - thresholdStep < value) {
                            $this.css('opacity', (threshold - value) / thresholdStep);
                        }
                    }, index * (3000 / $bullets.length));
                });
            } else {
                $this.animate({dummy: 1}, {
                    duration: 3000,
                    easing:   $.bez([0.13, 0.71, 0.30, 0.94]),
                    step:     function(now) {
                        $(this).find('.value').html(Math.round(value * now) + '%');
                    }
                });
                $this.find('.fill').css({width: value + '%'});
            }
        });
        if($this.hasClass('skill-bar-bullets')) {
            var $bullets = $this.find('.fill');
            $bullets.css('width', ((101 / $bullets.length) - 1) + '%');
        }
        if($.fn.initScrollCallback) {
            $this.attr('data-animate-callback', 'animate-skill');
        } else {
            $this.data('animate-skill').call();
        }
    });

    /* Portfolio isotope */
    $('.portfolio[data-portfolio-url]').bind('loadItems', function() {
        var $this   = $(this);
        var $items  = $this.children('.item');
        var $filter = $('.portfolio-filter > li:not(:first-child) > a[data-target="#' + $this.attr('id') + '"]');
        var $button = $('[data-portfolio-loadmore="#' + $this.attr('id') + '"]');
        var templ   = $this.attr('data-portfolio-template');
        var offset  = $items.length;
        var perPage = parseInt($this.attr('data-portfolio-per-page'));
        $.post($this.attr('data-portfolio-url'), {items: $items.length}, function(data) {
            if(0 < $filter.length) {
                var fc  = [];
                $items.each(function() {
                    fc  = fc.concat($(this).attr('class').split(' '));
                });
                $.each(data, function() {
                    fc  = fc.concat(this['slug'].split(' '));
                });
                fc      = fc.filter(function(i) {
                    return "portfolio-slug-" == i.substring(0, 15);
                });
                if(0 < fc.length) {
                    $filter.each(function() {
                        $(this).parent('li').hide();
                    });
                    $filter.filter('[data-filter=".' + fc.join('"], [data-filter=".') + '"]').each(function() {
                        $(this).parent('li').show();
                    });
                }
            }
            $.each(data, function(i, item) {
                var tpl     = templ;
                $.each(item, function(name, value) {
                    tpl = tpl.replace(new RegExp("{{" + name + "}}", "g"), value);
                });
                var $item   = $(tpl);
                var $images = $item.find('img');
                $item.data('sort', i).data('images', $images.length).bind('image-ready', function() {
                    $item.data('images', $item.data('images') - 1);
                    if(0 >= $item.data('images')) {
                        $this.isotope('insert', $item);
                        bindPopups();
                    }
                });
                $images.each(function() {
                    var image   = new Image();
                    $(image).bind('load', function() {
                        $item.triggerHandler('image-ready');
                    });
                    image.src   = $(this).attr('src');
                });
                if(0 === $images.length) {
                    $item.triggerHandler('image-ready');
                }
            });
            if(0 < $button.length) {
                if(data.length < perPage) {
                    $button.remove();
                }
            }
        }, 'json');
    }).each(function() {
        var $this = $(this);
        $this.isotope({
            itemSelector: '.item',
            layoutMode: 'masonry',
            transitionDuration: '1s',
            sortBy: 'sort',
            getSortData: {
                'sort': function() {
                    return $(this).data('sort');
                }
            },
            masonry: {
                resizable: false,
                columnWidth: $this.width() < 313 ? 270 : 313,
                gutter: 0
            }
        }).isotope('on', 'layoutComplete', function() {
            $(window).triggerHandler('resize-end');
        });
        if(true !== $this.data('first-load')) {
            $this.data('first-load', true);
            $this.triggerHandler('loadItems');
            setInterval(function() {
                $this.isotope({masonry: {columnWidth: $this.width() < 313 ? 270 : 313}}).isotope('layout');
            }, 1000);
        }
    });
    $('[data-portfolio-loadmore]').bind('click', function(e) {
        e.preventDefault();
        var $target = $($(this).attr('data-portfolio-loadmore')).filter('.portfolio[data-portfolio-url]');
        if(0 < $target.length) {
            $target.triggerHandler('loadItems');
        }
    });

    /* Portfolio filtering */
    // Isotope portfolio filtering
    $('.portfolio-filter a').bind('click', function(e) {
        e.preventDefault();
        var $this   = $(this);
        var $target = $($this.attr('data-target'));
        if(0 < $target.length) {
            $this.parent('li').parent('ul').find('li.active').removeClass('active');
            $this.parent('li').addClass('active');
            $target.find('.category > span').hide();
            if('*' == $this.attr('data-filter')) {
                $target.find('.category > span:first-child').show();
            } else {
                $target.find('.category > ' + $this.attr('data-filter').replace('portfolio-slug-', 'portfolio-slug-title-')).show();
            }
            $target.isotope({filter: $this.attr('data-filter')});
        }
    });

    /* Smooth section scrolling */
    // Autoscroll to target element when clicking on a link which href looks like this: #SOMEID and there is element with id="SOMEID" on the page
    $('[href*="#"]:not([href^="#!"]):not([href="#"])').bind('click', function(e) {
        e.preventDefault();
        var $this   = $(this);
        var split   = $this.attr('href').split('#');

        if(0 < split[0].length) {
            if('?' == split[0]) {
                split[0]    = document.location;
            }
            if('/' == split[0]) {
                split[0]    = document.location.protocol + '//' + document.location.host + '/';
            }
            if(split[0] != document.location.href.split('#')[0]) {
                document.location = split[0] + '#' + split[1];
                return;
            }
        }

        var $target = $('#' + split[1]);
        var speed   = isNaN(parseInt($('body').attr('data-scroll-speed'))) ? 1000 : parseInt($('body').attr('data-scroll-speed'));
        if(0 < $target.length) {
            $.scrollTo.window().queue([]).stop();
            $.scrollTo({left: 0, top: $target.is('body') ? 0 : Math.max(0, $target.offset().top - (0 === $('.navbar-header').height() ? $('.navbar-nav').height() : $('.navbar-header').height()) - 100)}, {duration: speed, easing: $.bez([1, 0.01, 0, 1])});
        }
    });

    /* Expandable sections */
    $('.expandable').each(function() {
        var $this   = $(this);
        $this.find('.diamond').bind('click', function(e) {
            e.preventDefault();
            $this.toggleClass('open');
            if($this.hasClass('open')) {
                $this.find('.expandable-content').height($this.find('.expandable-content-inner').outerHeight());
                $this.triggerHandler('expandable-open');
            } else {
                $this.find('.expandable-content').height(0);
                $this.triggerHandler('expandable-close');
            }
        });
    });

    /* Rollers */
    function childHeight($element) {
        var height  = 0;
        var min     = 0;
        $element.children().each(function() {
            var $this   = $(this);
            if('none' != $this.css('float')) {
                min     = Math.max(min, $this.outerHeight() + parseInt($this.css('margin-top')) + parseInt($this.css('margin-bottom')));
            }
            if('absolute' != $this.css('position') && 'none' == $this.css('float')) {
                height  += $this.outerHeight() + parseInt($this.css('margin-top')) + parseInt($this.css('margin-bottom'));
            }
        });
        return Math.max(height, min) - 1;
    }
    $('.roller').each(function() {
        var $roller = $(this);
        var $list   = $roller.find('.roller-list');
        var $items  = $list.first().children();
        var $prev   = $roller.find('.roller-prev');
        var $next   = $roller.find('.roller-next');
        var $blts   = $roller.find('.roller-bullets');
        var $parent = $roller.parents('.expandable');
        $list.bind('page', function() {
            var $this = $(this);
            $this.height(childHeight($this.children().eq($this.data('roller-page'))));
            $this.children().first().css('margin-top', 0);
            $this.children().first().css('margin-top', $this.children().first().offset().top - $this.children().eq($this.data('roller-page')).offset().top + parseInt($this.children().first().children().first().css('margin-top')));
        });
        $list.bind('prev', function() {
            $list.data('roller-page', $list.data('roller-page') - 1 >= 0 ? $list.data('roller-page') - 1 : $items.length - 1);
            $list.each(function() {
                $(this).triggerHandler('page');
            });
            if(0 < $blts.length) {
                $blts.children().removeClass('active').eq($list.data('roller-page')).addClass('active');
            }
        });
        $list.bind('next', function() {
            $list.data('roller-page', $list.data('roller-page') + 1 < $items.length ? $list.data('roller-page') + 1 : 0);
            $list.each(function() {
                $(this).triggerHandler('page');
            });
            if(0 < $blts.length) {
                $blts.children().removeClass('active').eq($list.data('roller-page')).addClass('active');
            }
        });
        $prev.bind('click', function(e) {
            e.preventDefault();
            $list.triggerHandler('prev');
        });
        $next.bind('click', function(e) {
            e.preventDefault();
            $list.triggerHandler('next');
        });
        $parent.bind('expandable-open', function() {
            $next.triggerHandler('click');
            $prev.triggerHandler('click');
        });
        if(0 < $blts.length) {
            for(var i = 0; i < $items.length; i++) {
                var $bullet = $('<a href="#" class="roller-bullet"/>');
                if(0 === i) {
                    $bullet.addClass('active');
                }
                $blts.append($bullet.data('roller-page', i).bind('click', function(e) {
                    e.preventDefault();
                    var $this = $(this);
                    $blts.children().removeClass('active').eq($this.data('roller-page')).addClass('active');
                    $list.data('roller-page', $this.data('roller-page'));
                    $list.each(function() {
                        $(this).triggerHandler('page');
                    });
                }));
            }
        }
        $list.data('roller-page', 0);
        $list.each(function() {
            $(this).triggerHandler('page');
        });
        if($roller.is('[data-roller-auto]')) {
            setInterval(function() {
                $list.triggerHandler('next');
            }, parseInt($roller.attr('data-roller-auto')));
        }
    });
})(jQuery);